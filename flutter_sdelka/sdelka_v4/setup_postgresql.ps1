# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
# –ó–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ PowerShell

Write-Host "üêò –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –°–¥–µ–ª–∫–∞ v4.0" -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã
$arch = (Get-WmiObject -Class Win32_Processor).Architecture
if ($arch -eq 0) {
    $postgresArch = "x64"
} elseif ($arch -eq 5) {
    $postgresArch = "x64"
} else {
    $postgresArch = "x86"
}

Write-Host "üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $postgresArch" -ForegroundColor Yellow

# URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ PostgreSQL
$postgresUrl = "https://get.enterprisedb.com/postgresql/postgresql-15.5-1-windows-x64.exe"
$installerPath = "$env:TEMP\postgresql_installer.exe"

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ PostgreSQL
$postgresService = Get-Service -Name "postgresql*" -ErrorAction SilentlyContinue
if ($postgresService) {
    Write-Host "‚úÖ PostgreSQL —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
    Write-Host "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Yellow
} else {
    Write-Host "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ PostgreSQL 15.5..." -ForegroundColor Yellow
    try {
        Invoke-WebRequest -Uri $postgresUrl -OutFile $installerPath -UseBasicParsing
        Write-Host "‚úÖ PostgreSQL –∑–∞–≥—Ä—É–∂–µ–Ω" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PostgreSQL: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "üåê –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤—Ä—É—á–Ω—É—é —Å: https://www.postgresql.org/download/windows/" -ForegroundColor Yellow
        exit 1
    }

    Write-Host "üì¶ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL..." -ForegroundColor Yellow
    Write-Host "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í –º–∞—Å—Ç–µ—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:" -ForegroundColor Red
    Write-Host "   - –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres: sdelka123" -ForegroundColor Cyan
    Write-Host "   - –ü–æ—Ä—Ç: 5432 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)" -ForegroundColor Cyan
    Write-Host "   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã" -ForegroundColor Cyan
    
    # –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
    Start-Process -FilePath $installerPath -Wait
    
    # –û—á–∏—Å—Ç–∫–∞
    Remove-Item $installerPath -Force
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
$pgPath = "C:\Program Files\PostgreSQL\15\bin"
$currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
if ($currentPath -notlike "*$pgPath*") {
    $newPath = $currentPath + ";" + $pgPath
    [Environment]::SetEnvironmentVariable("PATH", $newPath, "Machine")
    Write-Host "‚úÖ PostgreSQL –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH" -ForegroundColor Green
}

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã PostgreSQL
Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã PostgreSQL..." -ForegroundColor Yellow
$timeout = 60
$elapsed = 0
do {
    Start-Sleep -Seconds 2
    $elapsed += 2
    $service = Get-Service -Name "postgresql*" -ErrorAction SilentlyContinue
    if ($service -and $service.Status -eq "Running") {
        Write-Host "‚úÖ –°–ª—É–∂–±–∞ PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞" -ForegroundColor Green
        break
    }
} while ($elapsed -lt $timeout)

if ($elapsed -ge $timeout) {
    Write-Host "‚ö†Ô∏è –°–ª—É–∂–±–∞ PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" -ForegroundColor Yellow
    Write-Host "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é: services.msc" -ForegroundColor Cyan
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
Write-Host "üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Yellow

# SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
$sqlScript = @"
-- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
CREATE DATABASE sdelka_v4;

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE USER sdelka_user WITH PASSWORD 'sdelka_password';

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤
GRANT ALL PRIVILEGES ON DATABASE sdelka_v4 TO sdelka_user;

-- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
\c sdelka_v4

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ —Å—Ö–µ–º—É public
GRANT ALL ON SCHEMA public TO sdelka_user;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO sdelka_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO sdelka_user;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO sdelka_user;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
CREATE TABLE IF NOT EXISTS employees (
  id VARCHAR(36) PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  position VARCHAR(255) NOT NULL,
  department VARCHAR(255) NOT NULL,
  phone VARCHAR(50),
  email VARCHAR(255),
  is_active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS products (
  id VARCHAR(36) PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  unit VARCHAR(50) NOT NULL,
  article VARCHAR(100),
  category VARCHAR(255),
  is_active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS work_types (
  id VARCHAR(36) PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  unit VARCHAR(50) NOT NULL,
  standard_price DECIMAL(10,2),
  is_active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS work_orders (
  id VARCHAR(36) PRIMARY KEY,
  number VARCHAR(50) NOT NULL UNIQUE,
  date DATE NOT NULL,
  department VARCHAR(255) NOT NULL,
  description TEXT,
  status VARCHAR(20) NOT NULL DEFAULT 'draft',
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS work_order_items (
  id VARCHAR(36) PRIMARY KEY,
  work_order_id VARCHAR(36) NOT NULL,
  employee_id VARCHAR(36) NOT NULL,
  product_id VARCHAR(36) NOT NULL,
  work_type_id VARCHAR(36) NOT NULL,
  quantity INTEGER NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  total_amount DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (work_order_id) REFERENCES work_orders(id) ON DELETE CASCADE,
  FOREIGN KEY (employee_id) REFERENCES employees(id),
  FOREIGN KEY (product_id) REFERENCES products(id),
  FOREIGN KEY (work_type_id) REFERENCES work_types(id)
);

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO sdelka_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO sdelka_user;
"@

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
$sqlFile = "$env:TEMP\setup_sdelka_db.sql"
$sqlScript | Out-File -FilePath $sqlFile -Encoding UTF8

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞
Write-Host "üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞..." -ForegroundColor Yellow
try {
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º psql –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    $env:PGPASSWORD = "sdelka123"
    & "C:\Program Files\PostgreSQL\15\bin\psql.exe" -U postgres -f $sqlFile
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ë–î" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Å–∫—Ä–∏–ø—Ç–∞: $($_.Exception.Message)" -ForegroundColor Yellow
    Write-Host "üîß –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä—É—á–Ω—É—é:" -ForegroundColor Cyan
    Write-Host "   psql -U postgres -f $sqlFile" -ForegroundColor White
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
Remove-Item $sqlFile -Force

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Yellow
try {
    $env:PGPASSWORD = "sdelka_password"
    $result = & "C:\Program Files\PostgreSQL\15\bin\psql.exe" -h localhost -U sdelka_user -d sdelka_v4 -c "SELECT current_database(), current_user;" 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
        Write-Host "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: $result" -ForegroundColor Cyan
    } else {
        Write-Host "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" -ForegroundColor Yellow
}

Write-Host "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
Write-Host "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:" -ForegroundColor Cyan
Write-Host "   Host: localhost" -ForegroundColor White
Write-Host "   Port: 5432" -ForegroundColor White
Write-Host "   Database: sdelka_v4" -ForegroundColor White
Write-Host "   Username: sdelka_user" -ForegroundColor White
Write-Host "   Password: sdelka_password" -ForegroundColor White

Write-Host "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
Write-Host "   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell" -ForegroundColor White
Write-Host "   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: flutter pub get" -ForegroundColor White
Write-Host "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: flutter run" -ForegroundColor White
