from __future__ import annotations

import customtkinter as ctk
import tkinter.font as tkfont

from gui.forms.workers_form import WorkersForm
from gui.forms.job_types_form import JobTypesForm
from gui.forms.products_form import ProductsForm
from gui.forms.contracts_form import ContractsForm
from gui.forms.work_order_form import WorkOrdersForm
from gui.forms.reports_view import ReportsView
from gui.forms.settings_view import SettingsView
from utils.user_prefs import load_prefs
from utils.ui_theming import apply_user_fonts
from utils.versioning import get_version
from utils.runtime_mode import is_readonly


import logging


class AppWindow(ctk.CTk):
    def __init__(self) -> None:
        super().__init__()
        try:
            ver = get_version()
        except Exception:
            ver = get_version()
        self._version = ver
        self._app_title = f"–°–î–ï–õ–ö–ê –†–ú–ó {ver}"
        self.title(self._app_title)
        # –°—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω (Windows: state('zoomed')).
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á –∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
        try:
            self.state("zoomed")
        except Exception:
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –∑–∞–¥–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            self.geometry("1600x900")
        # –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        try:
            self.resizable(True, True)
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)
        self._tab_font_normal = None
        self._tab_font_active = None
        self._tabview = None
        self._segmented_button = None
        self._title_badge = None
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö after-–∑–∞–¥–∞—á –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self._after_ids: set[str] = set()
        self._closing: bool = False
        try:
            self.protocol("WM_DELETE_WINDOW", self._on_close)
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ UI
        try:
            prefs = load_prefs()
            apply_user_fonts(self, prefs)
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        from gui.sync_progress_dialog import SyncProgressManager

        self._sync_progress_manager = SyncProgressManager(self)
        self._build_ui()

    def _build_ui(self) -> None:
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        top_frame = ctk.CTkFrame(self, height=50)
        top_frame.pack(fill="x", padx=5, pady=(5, 0))
        top_frame.pack_propagate(False)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self._sync_button = ctk.CTkButton(
            top_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            fg_color="#dc2626",  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            hover_color="#b91c1c",
            width=200,
            height=35,
            command=self._force_sync,
        )
        self._sync_button.pack(side="right", padx=10, pady=7)

        # –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self._sync_status_label = ctk.CTkLabel(
            top_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", font=ctk.CTkFont(size=12)
        )
        self._sync_status_label.pack(side="left", padx=10, pady=7)

        # –û—Å–Ω–æ–≤–Ω–æ–π Tabview
        tabview = ctk.CTkTabview(self)
        tabview.pack(expand=True, fill="both", pady=(5, 0))
        self._tabview = tabview

        self.tab_orders = tabview.add("–ù–∞—Ä—è–¥—ã")
        self.tab_refs = tabview.add("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏")
        self.tab_reports = tabview.add("–û—Ç—á–µ—Ç—ã")
        self.tab_settings = tabview.add("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –§–æ—Ä–º—ã (–ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–±–æ—Ä–∫–∞)
        self._build_forms_for_current_mode()

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –≤–∫–ª–∞–¥–æ–∫ (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        self._setup_tab_fonts(self._tabview)
        try:
            if hasattr(self, "_refs_tabs") and getattr(self, "_refs_tabs") is not None:
                self._setup_tab_fonts(self._refs_tabs)  # type: ignore[arg-type]
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)
        try:
            self.bind(
                "<<UIFontsChanged>>",
                lambda e: [
                    self._setup_tab_fonts(self._tabview),
                    (
                        self._setup_tab_fonts(self._refs_tabs)
                        if hasattr(self, "_refs_tabs")
                        and getattr(self, "_refs_tabs") is not None
                        else None
                    ),
                ],
            )
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–µ–π–¥–∂ –Ω–∞–∑–≤–∞–Ω–∏—è/–≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞–±–æ–≤
        self._create_title_badge()
        # –°–ª–µ–¥–∏–º –∑–∞ —Ä–µ—Å–∞–π–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        self.bind("<Configure>", lambda e: self._place_title_badge(), add="+")
        try:
            seg = getattr(self._tabview, "_segmented_button", None)
            if (
                seg is not None
                and hasattr(seg, "__class__")
                and "CTkSegmentedButton" not in str(seg.__class__)
            ):
                seg.bind("<Configure>", lambda e: self._place_title_badge(), add="+")
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)
        # –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        self._schedule_after(50, self._place_title_badge)

        # –ú–∞–ª—ã–π –±–µ–π–¥–∂ "–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞" —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        try:
            seg = getattr(self._tabview, "_segmented_button", None)
            self._readonly_badge = ctk.CTkLabel(
                self, text="–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", text_color="#dc2626"
            )

            def place_badge():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
                    if (
                        not hasattr(self, "_readonly_badge")
                        or self._readonly_badge is None
                        or not self._readonly_badge.winfo_exists()
                    ):
                        return

                    if seg is None or not seg.winfo_exists():
                        try:
                            self._readonly_badge.place_forget()
                        except Exception:
                            pass
                        return

                    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–µ–π–¥–∂ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ readonly
                    if not is_readonly():
                        try:
                            self._readonly_badge.place_forget()
                        except Exception:
                            pass
                        return

                    self.update_idletasks()
                    seg.update_idletasks()
                    self._readonly_badge.update_idletasks()
                    x = seg.winfo_rootx() - self.winfo_rootx()
                    y = seg.winfo_rooty() - self.winfo_rooty()
                    w = seg.winfo_width()
                    self._readonly_badge.place(x=x + w + 16, y=y + 6)
                    self._readonly_badge.lift()
                except Exception:
                    try:
                        if (
                            hasattr(self, "_readonly_badge")
                            and self._readonly_badge
                            and self._readonly_badge.winfo_exists()
                        ):
                            self._readonly_badge.place_forget()
                    except Exception:
                        pass  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏

            self.bind("<Configure>", lambda e: place_badge(), add="+")
            if (
                seg is not None
                and hasattr(seg, "__class__")
                and "CTkSegmentedButton" not in str(seg.__class__)
            ):
                try:
                    seg.bind("<Configure>", lambda e: place_badge(), add="+")
                except Exception:
                    pass  # –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç bind
            self._schedule_after(60, place_badge)
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)

    def _create_title_badge(self) -> None:
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç ~8pt –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç scaling/–Ω–∞—Å—Ç—Ä–æ–µ–∫)
        try:
            base_family = tkfont.nametofont("TkDefaultFont").cget("family")
        except Exception:
            base_family = "TkDefaultFont"
        # 8pt ~ 11px –ø—Ä–∏ 96dpi; –∏—Å–ø–æ–ª—å–∑—É–µ–º 11px –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        fixed_font_small = ctk.CTkFont(family=base_family, size=11, weight="normal")
        fixed_font_small_bold = ctk.CTkFont(family=base_family, size=11, weight="bold")

        badge = ctk.CTkFrame(
            self, corner_radius=4, border_width=1, border_color=("gray70", "gray40")
        )
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        inner = ctk.CTkFrame(badge, fg_color="transparent")
        inner.pack(padx=3, pady=0)

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–µ –∑–∞–∑–æ—Ä—ã
        line_h = 12  # px

        # –°—Ç—Ä–æ–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ–∑ –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
        short = ctk.CTkLabel(
            inner,
            text=f"–°–î–ï–õ–ö–ê –†–ú–ó {self._version}",
            font=fixed_font_small_bold,
            anchor="w",
            justify="left",
            height=line_h,
        )
        short.pack(anchor="w", pady=0)
        line2 = ctk.CTkLabel(
            inner,
            text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—á—ë—Ç–∞ –Ω–∞—Ä—è–¥–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤",
            font=fixed_font_small,
            anchor="w",
            justify="left",
            height=line_h,
        )
        line2.pack(anchor="w", pady=0)
        line3 = ctk.CTkLabel(
            inner,
            text="–†–ú–ó",
            font=fixed_font_small,
            anchor="w",
            justify="left",
            height=line_h,
        )
        line3.pack(anchor="w", pady=0)

        self._title_badge = badge

    def _place_title_badge(self) -> None:
        badge = self._title_badge
        if badge is None or not badge.winfo_exists():
            return
        try:
            seg = getattr(self._tabview, "_segmented_button", None)
            self.update_idletasks()
            badge.update_idletasks()
            if seg is not None and seg.winfo_exists():
                seg.update_idletasks()
                seg_y = seg.winfo_rooty()
                seg_h = seg.winfo_height()
                win_y = self.winfo_rooty()
                by = (seg_y - win_y) + max(0, (seg_h - badge.winfo_height()) // 2)
            else:
                by = 8
            # –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
            bx = 8
            # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π
            if by < 0:
                by = 0
            badge.place(x=bx, y=by)
            badge.lift()
        except Exception:
            try:
                badge.place_forget()
            except Exception as exc:
                logging.getLogger(__name__).exception(
                    "Ignored unexpected error: %s", exc
                )

    def _setup_tab_fonts(self, tabview: ctk.CTkTabview) -> None:
        try:
            base_family = tkfont.nametofont("TkDefaultFont").cget("family")
        except Exception:
            base_family = "TkDefaultFont"
        # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ = –ø–∏–∫—Å–µ–ª–∏ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç tk scaling –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        normal = tkfont.Font(family=base_family, size=-20, weight="normal")
        active = tkfont.Font(family=base_family, size=-24, weight="bold")
        seg = getattr(tabview, "_segmented_button", None)
        if seg is None:
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã GC –Ω–µ —É–¥–∞–ª–∏–ª —à—Ä–∏—Ñ—Ç—ã
        if not hasattr(seg, "_fixed_fonts"):
            seg._fixed_fonts = {}
        seg._fixed_fonts["normal"] = normal
        seg._fixed_fonts["active"] = active

        def apply_fonts():
            current = None
            try:
                current = tabview.get()
            except Exception as exc:
                logging.getLogger(__name__).exception(
                    "Ignored unexpected error: %s", exc
                )
            buttons = getattr(seg, "_buttons_dict", {})
            for name, btn in buttons.items():
                f = active if name == current else normal
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º tkinter.font.Font –≤ —Ñ–æ—Ä–º–∞—Ç CustomTkinter
                    if hasattr(f, "cget"):
                        font_family = f.cget("family")
                        font_size = f.cget("size")
                        font_weight = f.cget("weight")
                        font_slant = f.cget("slant")
                        ctk_font = (font_family, font_size, font_weight, font_slant)
                    else:
                        ctk_font = f
                    btn.configure(font=ctk_font)
                except Exception as exc:
                    logging.getLogger(__name__).exception(
                        "Ignored unexpected error: %s", exc
                    )
                # –ë–µ–∑ —Ä–∞–∑—Ä—ã–≤–æ–≤ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
                try:
                    btn.grid_configure(padx=0, pady=0)
                except Exception:
                    try:
                        btn.pack_configure(padx=0, pady=0)
                    except Exception as exc:
                        logging.getLogger(__name__).exception(
                            "Ignored unexpected error: %s", exc
                        )
                # –ü—Ä–∏–º–µ–Ω–∏–º —à—Ä–∏—Ñ—Ç –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –≤–∏–¥–∂–µ—Ç–∞–º –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
                try:
                    for child in btn.winfo_children():
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –≤–∏–¥–∂–µ—Ç —à—Ä–∏—Ñ—Ç—ã
                            if (
                                hasattr(child, "configure")
                                and "font" in child.configure()
                            ):
                                if hasattr(f, "cget"):
                                    font_family = f.cget("family")
                                    font_size = f.cget("size")
                                    font_weight = f.cget("weight")
                                    font_slant = f.cget("slant")
                                    ctk_font = (
                                        font_family,
                                        font_size,
                                        font_weight,
                                        font_slant,
                                    )
                                else:
                                    ctk_font = f
                                child.configure(font=ctk_font)
                        except Exception as exc:
                            logging.getLogger(__name__).exception(
                                "Ignored unexpected error: %s", exc
                            )
                except Exception as exc:
                    logging.getLogger(__name__).exception(
                        "Ignored unexpected error: %s", exc
                    )

        # CTkSegmentedButton –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç bind, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if hasattr(seg, "__class__") and "CTkSegmentedButton" not in str(seg.__class__):
            try:
                seg.bind("<ButtonRelease-1>", lambda e: apply_fonts(), add="+")
                seg.bind("<KeyRelease>", lambda e: apply_fonts(), add="+")
            except Exception as exc:
                logging.getLogger(__name__).exception(
                    "Ignored unexpected error: %s", exc
                )
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–º–µ–Ω—É –≤–∫–ª–∞–¥–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —à—Ä–∏—Ñ—Ç—ã
        try:
            seg._last_tab_caption = None

            def _watch():
                if self._closing:
                    return
                try:
                    current = tabview.get()
                except Exception:
                    current = None
                if getattr(seg, "_last_tab_caption", None) != current:
                    seg._last_tab_caption = current
                    apply_fonts()
                self._schedule_after(120, _watch)

            self._schedule_after(80, _watch)
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)
        self._schedule_after(50, apply_fonts)

    def _clear_children(self, widget) -> None:
        try:
            for child in list(widget.winfo_children()):
                try:
                    child.destroy()
                except Exception as exc:
                    logging.getLogger(__name__).exception(
                        "Ignored unexpected error: %s", exc
                    )
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)

    def _build_forms_for_current_mode(self) -> None:
        # –û—á–∏—Å—Ç–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–∂–∏–º—É
        try:
            self._clear_children(self.tab_orders)
            self._clear_children(self.tab_refs)
            self._clear_children(self.tab_reports)
            self._clear_children(self.tab_settings)
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)

        # –ù–∞—Ä—è–¥—ã
        WorkOrdersForm(self.tab_orders, readonly=is_readonly()).pack(
            expand=True, fill="both"
        )

        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏)
        refs_tabs = ctk.CTkTabview(self.tab_refs)
        self._refs_tabs = refs_tabs
        refs_tabs.pack(expand=True, fill="both", padx=10, pady=(0, 0))
        tab_workers = refs_tabs.add("–†–∞–±–æ—Ç–Ω–∏–∫–∏")
        tab_jobs = refs_tabs.add("–í–∏–¥—ã —Ä–∞–±–æ—Ç")
        tab_products = refs_tabs.add("–ò–∑–¥–µ–ª–∏—è")
        tab_contracts = refs_tabs.add("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã")

        WorkersForm(tab_workers, readonly=is_readonly()).pack(expand=True, fill="both")
        JobTypesForm(tab_jobs, readonly=is_readonly()).pack(expand=True, fill="both")
        ProductsForm(tab_products, readonly=is_readonly()).pack(
            expand=True, fill="both"
        )
        ContractsForm(tab_contracts, readonly=is_readonly()).pack(
            expand=True, fill="both"
        )

        # –û—Ç—á–µ—Ç—ã
        ReportsView(self.tab_reports).pack(expand=True, fill="both")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        SettingsView(self.tab_settings, readonly=is_readonly()).pack(
            expand=True, fill="both"
        )

    def rebuild_forms_for_mode(self) -> None:
        # –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ (–ø–æ—Å–ª–µ –¥–∏–∞–ª–æ–≥–∞ –≤—Ö–æ–¥–∞)
        self._build_forms_for_current_mode()
        try:
            self._setup_tab_fonts(self._tabview)
            if hasattr(self, "_refs_tabs") and getattr(self, "_refs_tabs") is not None:
                self._setup_tab_fonts(self._refs_tabs)  # type: ignore[arg-type]
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)

    def _schedule_after(self, delay_ms: int, callback) -> None:
        if self._closing:
            return
        try:
            aid = self.after(delay_ms, callback)
            try:
                self._after_ids.add(aid)
            except Exception as exc:
                logging.getLogger(__name__).exception(
                    "Ignored unexpected error: %s", exc
                )
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)

    def _on_close(self) -> None:
        self._closing = True

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
        try:
            from services.auto_sync import sync_on_shutdown

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self.sync_with_dialog(sync_on_shutdown, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            def wait_for_sync_completion():
                if (
                    not self._sync_progress_manager._sync_thread
                    or not self._sync_progress_manager._sync_thread.is_alive()
                ):
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
                    self._finalize_close()
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 500–º—Å
                    self.after(500, wait_for_sync_completion)

            self.after(500, wait_for_sync_completion)
            return  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, –∂–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é

        except Exception as exc:
            logging.getLogger(__name__).exception(
                "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: %s", exc
            )
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            self._finalize_close()

    def _finalize_close(self) -> None:
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        # –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ after
        for aid in list(self._after_ids):
            try:
                self.after_cancel(aid)
            except Exception as exc:
                logging.getLogger(__name__).exception(
                    "Ignored unexpected error: %s", exc
                )
            try:
                self._after_ids.discard(aid)
            except Exception as exc:
                logging.getLogger(__name__).exception(
                    "Ignored unexpected error: %s", exc
                )

        # –û—á–∏—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if hasattr(self, "_sync_progress_manager") and self._sync_progress_manager:
            try:
                self._sync_progress_manager.cleanup()
            except Exception as exc:
                logging.getLogger(__name__).exception(
                    "Ignored unexpected error: %s", exc
                )

        # –û—á–∏—â–∞–µ–º readonly badge
        if hasattr(self, "_readonly_badge") and self._readonly_badge:
            try:
                if self._readonly_badge.winfo_exists():
                    self._readonly_badge.destroy()
            except Exception:
                pass

        try:
            super().destroy()
        except Exception as exc:
            logging.getLogger(__name__).exception("Ignored unexpected error: %s", exc)

    def _force_sync(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
        try:
            from services.auto_sync import force_sync

            self.sync_with_dialog(force_sync, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")

            # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            def check_completion():
                if self._sync_progress_manager.dialog is None:
                    # –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—ã
                    self._refresh_all_forms()
                    self._update_sync_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                    self.after(1000, check_completion)

            self.after(1000, check_completion)

        except Exception as exc:
            logging.getLogger(__name__).exception(
                "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: %s", exc
            )
            self._update_sync_status("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

    def _sync_completed(self, success: bool) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
            self._sync_button.configure(state="normal", text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

            if success:
                self._sync_status_label.configure(
                    text="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
                self._refresh_all_forms()
            else:
                self._sync_status_label.configure(text="–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

        except Exception as exc:
            logging.getLogger(__name__).exception(
                "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: %s", exc
            )

    def _refresh_all_forms(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–¥—Ç—è–Ω—É–ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self._build_forms_for_current_mode()
            logging.getLogger(__name__).info("–§–æ—Ä–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        except Exception as exc:
            logging.getLogger(__name__).exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º: %s", exc)

    def _update_sync_status(self, status: str) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            if hasattr(self, "_sync_status_label"):
                self._sync_status_label.configure(text=status)
        except Exception as exc:
            logging.getLogger(__name__).exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %s", exc)

    def sync_with_dialog(
        self, sync_function, title: str = "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"
    ) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥–∏–∞–ª–æ–≥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            self._sync_progress_manager.start_sync(
                sync_function=sync_function, title=title
            )
        except Exception as exc:
            logging.getLogger(__name__).exception(
                "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥–∏–∞–ª–æ–≥–æ–º: %s", exc
            )

    def wait_for_sync_completion(self) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)"""
        import time

        while (
            self._sync_progress_manager._sync_thread
            and self._sync_progress_manager._sync_thread.is_alive()
        ):
            self.update()
            time.sleep(0.1)
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        time.sleep(1)

    def start_auto_sync(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ —Ñ–æ–Ω–µ)"""
        try:
            from services.auto_sync import start_auto_sync

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            start_auto_sync(
                ui_refresh_callback=self._refresh_all_forms,
                sync_status_callback=self._update_sync_status,
            )
            logging.getLogger(__name__).info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")

        except Exception as exc:
            logging.getLogger(__name__).exception(
                "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: %s", exc
            )
